// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
     provider = "prisma-client-js"
}

datasource db {
     provider  = "postgresql"
     url       = env("DATABASE_URL")
     directUrl = env("DIRECT_URL")
}

model Pet {
     id          Int     @id @default(autoincrement())
     name        String
     imgUrl      String
     description String
     status      Boolean @default(true)
}

// model pet {
//      id          Int    @id @default(autoincrement())
//      name        String
//      imgUrl      String
//      description String
// }

// model Post {
//     id            String   @id @default(nanoid())
//     createdAt     DateTime @default(now())
//     createdBy     User     @relation(fields: [createdByUser], references: [name], onDelete: Cascade)
//     createdByUser String

//     title       String
//     value       String
//     description String
//     points      Int       @default(1)
//     upvotes     Upvote[]
//     comments    Comment[]
// }

// model Comment {
//     id            String   @id @default(nanoid())
//     createdAt     DateTime @default(now())
//     createdBy     User     @relation("createdBy", fields: [createdByUser], references: [name], onDelete: Cascade)
//     createdByUser String
//     post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//     postId        String

//     points  Int      @default(1)
//     upvotes Upvote[]
//     text    String

//     replies   Comment[] @relation("CommentToComment")
//     replyTo   Comment?  @relation("CommentToComment", fields: [replyToId], references: [id], onDelete: Cascade)
//     replyToId String?
// }

// model Upvote {
//     id        String   @id @default(nanoid())
//     createdAt DateTime @default(now())

//     user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//     userId String

//     comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
//     commentId String?

//     post   Post?   @relation(fields: [postId], references: [id])
//     postId String?

//     @@unique([userId, commentId])
// }

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(nanoid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(nanoid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
     id            String    @id @default(nanoid())
     createdAt     DateTime  @default(now())
     name          String    @unique
     email         String    @unique
     emailVerified DateTime?
     image         String?

     //     accounts Account[]
     //     sessions Session[]
     //     posts    Post[]
     //     Comment  Comment[] @relation("createdBy")
     //     Upvote   Upvote[]
}

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
